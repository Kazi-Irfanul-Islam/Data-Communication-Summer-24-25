first code -> 


%Lab 10
%Matlab Program for Frequency Division Multiplexing
clc
clear all
close all
%% Message Signal Generation
fs = 4001; %Sampling Frequency
t = 0:1/fs:1-1/fs; %Generating Time axis
Am1 = 2; %Amplitude of First Message Signal
fm1 = 4; %Frequency of First Message Signal
m1 = Am1*cos(2*pi*fm1*t); % First Message Signal
Am2 = 3; %Amplitude of Second Message Signal
fm2 = 5; %Frequency of Second Message Signal
m2 = Am2*cos(2*pi*fm2*t); % Second Message Signal
Am3 = 4; %Amplitude of Third Message Signal
fm3 = 6; %Frequency of Third Message Signal
m3 = Am3*cos(2*pi*fm3*t); % Third Message Signal
%%
%% Carrier Signal Generation
Cm1 = 1; %Amplitude of First Carrier Signal
fc1 = 100; %Frequency of First Carrier Signal
c1 = Cm1*cos(2*pi*fc1*t); % First Carrier Signal
Cm2 = 1; %Amplitude of Second Carrier Signal
fc2 = 170; %Frequency of Second Carrier Signal
c2 = Cm2*cos(2*pi*fc2*t); % Second Carrier Signal
Cm3 = 1; %Amplitude of Third Carrier Signal
fc3 = 250; %Frequency of Third Carrier Signal
c3 = Cm3*cos(2*pi*fc3*t); % Third Carrier Signal
%%
%% Composite Signal Generation
x = (m1).*c1+(m2).*c2+(m3).*c3;
%%%% Plotting the Signals in Time-Domain and Frequency-Domain
figure
subplot(3,1,1)
plot(t,m1)
xlabel('time')
ylabel('amplitude')
title('Message Signal 1 in Time Domain')
ylim([-Am1 Am1])
subplot(3,1,2)
plot(t,m2)
xlabel('time')
ylabel('amplitude')
title('Message Signal 2 in Time Domain')
ylim([-Am2 Am2])
subplot(3,1,3)
plot(t,m3)
xlabel('time')
ylabel('amplitude')
title('Message Signal 3 in Time Domain')
ylim([-Am3 Am3])
M1 = abs(fftshift(fft(m1)))/(fs/2); %Fourier Transformation of m1
M2 = abs(fftshift(fft(m2)))/(fs/2); %Fourier Transformation of m2
M3 = abs(fftshift(fft(m3)))/(fs/2); %Fourier Transformation of m3
X = abs(fftshift(fft(x)))/(fs/2); %Fourier Transformation of x
f = fs/2*linspace(-1,1,fs);
figure
subplot(3,1,1)
stem(f,M1)
xlabel('frequency')
ylabel('amplitude')
title('Message Signal 1 in Frequency Domain')
axis([-10 10 0 2.5])
subplot(3,1,2)
stem(f,M2)
xlabel('frequency')
ylabel('amplitude')
title('Message Signal 2 in Frequency Domain')
axis([-10 10 0 3.5])
subplot(3,1,3)
stem(f,M3)
xlabel('frequency')
ylabel('amplitude')
title('Message Signal 3 in Frequency Domain')
axis([-10 10 0 4.5])
figure
subplot(2,1,1)
plot(t,x)
xlabel('time')
ylabel('amplitude')
title('Composite Signal in Time Domain')
subplot(2,1,2)
stem(f,X)
xlabel('frequency')
ylabel('amplitude')
title('Composite Signal in Frequency Domain')
axis([-270 270 0 2.5])
%%
%% Passing the Composite Signal Through Bandpass Filter
[num1, den1] = butter(5, [(fc1-fm1-6)/(fs/2),(fc1+fm1+6)/(fs/2)]);
%Butterworth Filter Window Determining for Bandpass Filter
bpf1 = filter(num1,den1,x); %Filtering is done here
[num2, den2] = butter(5, [(fc2-fm2-6)/(fs/2),(fc2+fm2+6)/(fs/2)]);
%Butterworth Filter Window Determining for Bandpass Filter
bpf2 = filter(num2,den2,x); %Filtering is done here
[num3, den3] = butter(5, [(fc3-fm3-6)/(fs/2),(fc3+fm3+6)/(fs/2)]);
%Butterworth Filter Window Determining for Bandpass Filter
bpf3 = filter(num3,den3,x); %Filtering is done here
%%
%% Mixing
z1 = 2*bpf1.*c1;
z2 = 2*bpf2.*c2;
z3 = 2*bpf3.*c3;
%%
%% Passing the Mixed Signals Through Lowpass Filter
[num4, den4] = butter(5, (fm1+3)/(fs/2)); %Low pass filter is made here
rec1 = filter(num4,den4,z1); %Filtering is done here
[num5, den5] = butter(5, (fm2+3)/(fs/2)); %Low pass filter is made here
rec2 = filter(num5,den5,z2); %Filtering is done here
[num6, den6] = butter(5, (fm3+3)/(fs/2)); %Low pass filter is made here
rec3 = filter(num6,den6,z3); %Filtering is done here
%%
%% Plotting the Received Signals in Time-Domain and Frequency Domain
figure
subplot(3,1,1)
plot(t,rec1)
xlabel('time')
ylabel('amplitude')
title('received signal 1 in time domain')
ylim([-Am1 Am1])
subplot(3,1,2)
plot(t,rec2)
xlabel('time')
ylabel('amplitude')
title('received signal 2 in time domain')
ylim([-Am2 Am2])
subplot(3,1,3)
plot(t,rec3)
xlabel('time')
ylabel('amplitude')
title('received signal 3 in time domain')
ylim([-Am3 Am3])
R1 = abs(fftshift(fft(rec1)))/(fs/2); %Fourier Transformation is done here
R2 = abs(fftshift(fft(rec2)))/(fs/2); %Fourier Transformation is done here
R3 = abs(fftshift(fft(rec3)))/(fs/2); %Fourier Transformation is done here
figure
subplot(3,1,1)
stem(f,R1)
xlabel('frequency')
ylabel('amplitude')
title('received signal 1 in frequency domain')
xlim([-10 10])
subplot(3,1,2)
stem(f,R2)
xlabel('frequency')
ylabel('amplitude')
title('received signal 2 in frequency domain')
xlim([-10 10])
subplot(3,1,3)
stem(f,R3)
xlabel('frequency')
ylabel('amplitude')
title('received signal 3 in frequency domain')
xlim([-10 10])













_________________________________________________________________________________
__

PERFORMANCE______________________________________________________________________________


clc;
clear all;
close all;
fs = 1000; % Sampling Frequency (increased for better resolution)
t = 0:1/fs:1-1/fs; % Time axis

% Parameters calculated from ID (F=2, G=9)
am1 = 4;  fm1 = 10; % am1=F+2, fm1=G+1
am2 = 7;  fm2 = 11; % am2=F+5, fm2=G+2
am3 = 10; fm3 = 12; % am3=F+8, fm3=G+3
am4 = 13; fm4 = 13; % am4=F+11, fm4=G+4

% Generate the four message signals
m1 = am1*cos(2*pi*fm1*t);
m2 = am2*cos(2*pi*fm2*t);
m3 = am3*cos(2*pi*fm3*t);
m4 = am4*cos(2*pi*fm4*t);

% Carrier frequencies are chosen to fit within the 50-250 Hz channel
fc1 = 65;  % For m1, occupies 55-75 Hz
fc2 = 96;  % For m2, occupies 85-107 Hz
fc3 = 129; % For m3, occupies 117-141 Hz
fc4 = 164; % For m4, occupies 151-177 Hz

c1 = cos(2*pi*fc1*t);
c2 = cos(2*pi*fc2*t);
c3 = cos(2*pi*fc3*t);
c4 = cos(2*pi*fc4*t);

% Each message is modulated with its respective carrier and then summed
x = (m1.*c1) + (m2.*c2) + (m3.*c3) + (m4.*c4);


% Plot Message Signals in Time Domain
figure('Name', 'Original Message Signals');
subplot(4,1,1); plot(t,m1); title('Message Signal 1 (Time Domain)'); ylabel('Amplitude'); ylim([-am1 am1]);
subplot(4,1,2); plot(t,m2); title('Message Signal 2 (Time Domain)'); ylabel('Amplitude'); ylim([-am2 am2]);
subplot(4,1,3); plot(t,m3); title('Message Signal 3 (Time Domain)'); ylabel('Amplitude'); ylim([-am3 am3]);
subplot(4,1,4); plot(t,m4); title('Message Signal 4 (Time Domain)'); ylabel('Amplitude'); xlabel('Time (s)'); ylim([-am4 am4]);

% Fourier Transforms for Frequency Domain Plots
f = fs/2*linspace(-1,1,fs);
M1 = abs(fftshift(fft(m1)))/(fs/2);
M2 = abs(fftshift(fft(m2)))/(fs/2);
M3 = abs(fftshift(fft(m3)))/(fs/2);
M4 = abs(fftshift(fft(m4)))/(fs/2);
X = abs(fftshift(fft(x)))/(fs/2);

% Plot Composite Signal in Time and Frequency Domain
figure('Name', 'Multiplexed Signal (Transmitter Output)');
subplot(2,1,1);
plot(t,x);
title('Composite (Multiplexed) Signal in Time Domain');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(2,1,2);
stem(f,X);
title('Composite (Multiplexed) Signal in Frequency Domain');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
axis([-270 270 0 max(X)+1]); % View entire spectrum
grid on;

% Step 4: De-Multiplexing using Bandpass Filters
%==========================================================================
% Each filter is designed to isolate one channel
% Passband = [fc-fm-margin, fc+fm+margin] / (fs/2)
bpf1 = filter(butter(5, [(fc1-fm1-2)/(fs/2), (fc1+fm1+2)/(fs/2)]), x);
bpf2 = filter(butter(5, [(fc2-fm2-2)/(fs/2), (fc2+fm2+2)/(fs/2)]), x);
bpf3 = filter(butter(5, [(fc3-fm3-2)/(fs/2), (fc3+fm3+2)/(fs/2)]), x);
bpf4 = filter(butter(5, [(fc4-fm4-2)/(fs/2), (fc4+fm4+2)/(fs/2)]), x);

% Step 5: De-Modulation (Mixing)
%==========================================================================
% Mix the filtered signal with the original carrier
z1 = 2 * bpf1 .* c1;
z2 = 2 * bpf2 .* c2;
z3 = 2 * bpf3 .* c3;
z4 = 2 * bpf4 .* c4;

% Step 6: Signal Recovery using Lowpass Filters
%==========================================================================
% LPF removes the high-frequency components after mixing
% Cutoff = (fm+margin) / (fs/2)
rec1 = filter(butter(5, (fm1+3)/(fs/2)), z1);
rec2 = filter(butter(5, (fm2+3)/(fs/2)), z2);
rec3 = filter(butter(5, (fm3+3)/(fs/2)), z3);
rec4 = filter(butter(5, (fm4+3)/(fs/2)), z4);

% Plot Received Signals in Time Domain
figure('Name', 'Recovered Message Signals');
subplot(4,1,1); plot(t,rec1); title('Recovered Signal 1 (Time Domain)'); ylabel('Amplitude'); ylim([-am1 am1]);
subplot(4,1,2); plot(t,rec2); title('Recovered Signal 2 (Time Domain)'); ylabel('Amplitude'); ylim([-am2 am2]);
subplot(4,1,3); plot(t,rec3); title('Recovered Signal 3 (Time Domain)'); ylabel('Amplitude'); ylim([-am3 am3]);
subplot(4,1,4); plot(t,rec4); title('Recovered Signal 4 (Time Domain)'); ylabel('Amplitude'); xlabel('Time (s)'); ylim([-am4 am4]);

% Fourier Transforms for Frequency Domain Plots
R1 = abs(fftshift(fft(rec1)))/(fs/2);
R2 = abs(fftshift(fft(rec2)))/(fs/2);
R3 = abs(fftshift(fft(rec3)))/(fs/2);
R4 = abs(fftshift(fft(rec4)))/(fs/2);

% Plot Received Signals in Frequency Domain
figure('Name', 'Recovered Signals (Frequency)');
subplot(4,1,1); stem(f,R1); title('Recovered Signal 1 (Frequency Domain)'); ylabel('Magnitude'); xlim([-20 20]);
subplot(4,1,2); stem(f,R2); title('Recovered Signal 2 (Frequency Domain)'); ylabel('Magnitude'); xlim([-20 20]);
subplot(4,1,3); stem(f,R3); title('Recovered Signal 3 (Frequency Domain)'); ylabel('Magnitude'); xlim([-20 20]);
subplot(4,1,4); stem(f,R4); title('Recovered Signal 4 (Frequency Domain)'); ylabel('Magnitude'); xlabel('Frequency (Hz)'); xlim([-20 20]);



=========================================================================
performance FINAL
============================================================================



% ======================================================
% Lab Performance Task - Frequency Division Multiplexing (4 Signals)
% ======================================================

clc; clear; close all;

%% User Defined Parameters
F = 2; % Example, replace with actual value
G = 3; % Example, replace with actual value

fs = 4001; % Sampling Frequency
t = 0:1/fs:1-1/fs; % Time axis

%% Message Signal Generation
am1 = F + 2; fm1 = G + 1;
am2 = F + 5; fm2 = G + 2;
am3 = F + 8; fm3 = G + 3;
am4 = F + 11; fm4 = G + 4;

mt1 = am1*cos(2*pi*fm1*t);
mt2 = am2*cos(2*pi*fm2*t);
mt3 = am3*cos(2*pi*fm3*t);
mt4 = am4*cos(2*pi*fm4*t);

%% Carrier Signal Generation
% Choose carriers within 50-250 Hz range and spaced apart
fc1 = 60; fc2 = 110; fc3 = 170; fc4 = 230; 
Cm = 1; % Carrier amplitude

c1 = Cm*cos(2*pi*fc1*t);
c2 = Cm*cos(2*pi*fc2*t);
c3 = Cm*cos(2*pi*fc3*t);
c4 = Cm*cos(2*pi*fc4*t);

%% Amplitude Modulation (DSB-SC)
s1 = mt1 .* c1;
s2 = mt2 .* c2;
s3 = mt3 .* c3;
s4 = mt4 .* c4;

%% Composite Signal (FDM)
x = s1 + s2 + s3 + s4;

%% Plot Time Domain of Message Signals
figure
subplot(4,1,1); plot(t, mt1); title('Message Signal 1'); xlabel('Time'); ylabel('Amplitude'); ylim([-am1 am1])
subplot(4,1,2); plot(t, mt2); title('Message Signal 2'); xlabel('Time'); ylabel('Amplitude'); ylim([-am2 am2])
subplot(4,1,3); plot(t, mt3); title('Message Signal 3'); xlabel('Time'); ylabel('Amplitude'); ylim([-am3 am3])
subplot(4,1,4); plot(t, mt4); title('Message Signal 4'); xlabel('Time'); ylabel('Amplitude'); ylim([-am4 am4])

%% Frequency Axis
f = fs/2*linspace(-1,1,fs);

%% FFT of Composite Signal
X = abs(fftshift(fft(x)))/(fs/2);
figure
stem(f,X); title('Composite Signal Spectrum'); xlabel('Frequency'); ylabel('Amplitude'); xlim([-270 270])

%% Bandpass Filtering (Demultiplexing)
[num1, den1] = butter(5, [(fc1-fm1-5)/(fs/2),(fc1+fm1+5)/(fs/2)]);
[num2, den2] = butter(5, [(fc2-fm2-5)/(fs/2),(fc2+fm2+5)/(fs/2)]);
[num3, den3] = butter(5, [(fc3-fm3-5)/(fs/2),(fc3+fm3+5)/(fs/2)]);
[num4, den4] = butter(5, [(fc4-fm4-5)/(fs/2),(fc4+fm4+5)/(fs/2)]);

bpf1 = filter(num1, den1, x);
bpf2 = filter(num2, den2, x);
bpf3 = filter(num3, den3, x);
bpf4 = filter(num4, den4, x);

%% Mixing with Carrier for Demodulation
z1 = 2 * bpf1 .* c1;
z2 = 2 * bpf2 .* c2;
z3 = 2 * bpf3 .* c3;
z4 = 2 * bpf4 .* c4;

%% Lowpass Filtering to Recover Messages
[num_lp1, den_lp1] = butter(5, (fm1+3)/(fs/2));
[num_lp2, den_lp2] = butter(5, (fm2+3)/(fs/2));
[num_lp3, den_lp3] = butter(5, (fm3+3)/(fs/2));
[num_lp4, den_lp4] = butter(5, (fm4+3)/(fs/2));

rec1 = filter(num_lp1, den_lp1, z1);
rec2 = filter(num_lp2, den_lp2, z2);
rec3 = filter(num_lp3, den_lp3, z3);
rec4 = filter(num_lp4, den_lp4, z4);

%% Plot Received Signals (Time Domain)
figure
subplot(4,1,1); plot(t, rec1); title('Recovered Message 1'); xlabel('Time'); ylabel('Amplitude'); ylim([-am1 am1])
subplot(4,1,2); plot(t, rec2); title('Recovered Message 2'); xlabel('Time'); ylabel('Amplitude'); ylim([-am2 am2])
subplot(4,1,3); plot(t, rec3); title('Recovered Message 3'); xlabel('Time'); ylabel('Amplitude'); ylim([-am3 am3])
subplot(4,1,4); plot(t, rec4); title('Recovered Message 4'); xlabel('Time'); ylabel('Amplitude'); ylim([-am4 am4])

%% Plot Frequency Domain of Received Signals
R1 = abs(fftshift(fft(rec1)))/(fs/2);
R2 = abs(fftshift(fft(rec2)))/(fs/2);
R3 = abs(fftshift(fft(rec3)))/(fs/2);
R4 = abs(fftshift(fft(rec4)))/(fs/2);

figure
subplot(4,1,1); stem(f, R1); title('Recovered Message 1 Spectrum'); xlabel('Frequency'); ylabel('Amplitude'); xlim([-10 10])
subplot(4,1,2); stem(f, R2); title('Recovered Message 2 Spectrum'); xlabel('Frequency'); ylabel('Amplitude'); xlim([-10 10])
subplot(4,1,3); stem(f, R3); title('Recovered Message 3 Spectrum'); xlabel('Frequency'); ylabel('Amplitude'); xlim([-10 10])
subplot(4,1,4); stem(f, R4); title('Recovered Message 4 Spectrum'); xlabel('Frequency'); ylabel('Amplitude'); xlim([-10 10])
