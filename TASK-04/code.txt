 1/clc
clear all
close all

bit_stream = [1 0 0 0 1 1 0 1];
no_bits = length(bit_stream);
bit_rate = 1000; % 1 kbps
pulse_per_bit = 1; % for unipolar NRZ
pulse_duration = 1 / (pulse_per_bit * bit_rate);
no_pulses = no_bits * pulse_per_bit;
samples_per_pulse = 500;
fs = samples_per_pulse / pulse_duration; % sampling frequency

t = 0:1/fs:(no_pulses * pulse_duration); % sampling interval
no_samples = length(t); % total number of samples

dig_sig = zeros(1, no_samples);
max_voltage = 5;
min_voltage = 0;

for i = 1:no_bits
    if bit_stream(i) == 1
        dig_sig(((i-1)*samples_per_pulse)+1 : i*samples_per_pulse) = ...
            max_voltage * ones(1, samples_per_pulse);
    else
        dig_sig(((i-1)*samples_per_pulse)+1 : i*samples_per_pulse) = ...
            min_voltage * ones(1, samples_per_pulse);
    end
end

plot(t, dig_sig, 'LineWidth', 1.5)
grid on
xlabel('Time (seconds)')
ylabel('Voltage (V)')
ylim([min_voltage - (0.2*max_voltage), max_voltage + (0.2*max_voltage)])
title(['Unipolar NRZ for Bit Stream: ', num2str(bit_stream)]);






2/ 
clc
clear all
close all

bit_stream = [1 0 1 0 1 1 0 1];
no_bits = length(bit_stream);
bit_rate = 1000; % 1 kbps
pulse_per_bit = 2; % for unipolar RZ
pulse_duration = 1 / (pulse_per_bit * bit_rate);
no_pulses = no_bits * pulse_per_bit;
samples_per_pulse = 500;
fs = samples_per_pulse / pulse_duration; % sampling frequency

% Time vector
t = 0:1/fs:(no_pulses * pulse_duration);
no_samples = length(t);

dig_sig = zeros(1, no_samples);
max_voltage = 4;
min_voltage = 0;

for i = 1:no_bits
    j = (i-1)*2;
    if bit_stream(i) == 1
        % First half of bit period (high pulse)
        dig_sig((j*samples_per_pulse + 1):(j+1)*samples_per_pulse) = ...
            max_voltage * ones(1, samples_per_pulse);
        % Second half of bit period (return to zero)
        dig_sig(((j+1)*samples_per_pulse + 1):(j+2)*samples_per_pulse) = ...
            zeros(1, samples_per_pulse);
    else
        % Both halves at zero
        dig_sig((j*samples_per_pulse + 1):(j+1)*samples_per_pulse) = ...
            min_voltage * ones(1, samples_per_pulse);
        dig_sig(((j+1)*samples_per_pulse + 1):(j+2)*samples_per_pulse) = ...
            zeros(1, samples_per_pulse);
    end
end

% Plotting
plot(t, dig_sig, 'LineWidth', 1.5)
grid on
xlabel('Time (seconds)')
ylabel('Voltage (V)')
ylim([min_voltage - 0.2*max_voltage, max_voltage + 0.2*max_voltage])
title(['Unipolar RZ for Bit Stream: ', num2str(bit_stream)]);

performance task : 

a/

clc; clear; close all;

% Bit stream from E,F,G
bit_stream = [0 1 0 0 0 0 1 0 1 0 0 1];
bit_rate = 4000; % 4 kbps
pulse_per_bit = 1;
pulse_duration = 1 / (pulse_per_bit * bit_rate);
samples_per_pulse = 500;
fs = samples_per_pulse / pulse_duration;

t = 0:1/fs:(length(bit_stream)*pulse_duration);
dig_sig = zeros(1, length(t));
max_voltage = 5;

for i = 1:length(bit_stream)
    if bit_stream(i) == 1
        dig_sig((i-1)*samples_per_pulse+1:i*samples_per_pulse) = -max_voltage;
    else
        dig_sig((i-1)*samples_per_pulse+1:i*samples_per_pulse) = max_voltage;
    end
end

plot(t, dig_sig, 'LineWidth', 1.5);
grid on;
xlabel('Time (seconds)');
ylabel('Voltage (V)');
title('Polar NRZ-L for Bit Stream [0100 0010 1001]');
ylim([-max_voltage*1.5, max_voltage*1.5]);

b/

clc; clear; close all;

bit_stream = [0 1 0 0 0 0 1 0 1 0 0 1];
bit_rate = 2000; % 2 kbps
pulse_per_bit = 2;
pulse_duration = 1/(pulse_per_bit*bit_rate);
samples_per_pulse = 500;
fs = samples_per_pulse/pulse_duration;

t = 0:1/fs:(length(bit_stream)*pulse_per_bit*pulse_duration);
dig_sig = zeros(1,length(t));
max_voltage = 5;

for i = 1:length(bit_stream)
    j = (i-1)*2;
    if bit_stream(i) == 1
        dig_sig(j*samples_per_pulse+1:(j+1)*samples_per_pulse) = max_voltage;
        dig_sig((j+1)*samples_per_pulse+1:(j+2)*samples_per_pulse) = -max_voltage;
    else
        dig_sig(j*samples_per_pulse+1:(j+1)*samples_per_pulse) = -max_voltage;
        dig_sig((j+1)*samples_per_pulse+1:(j+2)*samples_per_pulse) = max_voltage;
    end
end

plot(t,dig_sig,'LineWidth',1.5);
grid on;
xlabel('Time (seconds)');
ylabel('Voltage (V)');
title('Manchester Encoding for Bit Stream [0100 0010 1001]');
ylim([-max_voltage*1.5, max_voltage*1.5]);

c/
clc; clear; close all;

bit_stream = [0 1 0 0 0 0 1 0 1 0 0 1];
bit_rate = 5000;
pulse_per_bit = 1;
pulse_duration = 1/(pulse_per_bit*bit_rate);
samples_per_pulse = 500;
fs = samples_per_pulse/pulse_duration;

t = 0:1/fs:(length(bit_stream)*pulse_duration);
dig_sig = zeros(1,length(t));
max_voltage = 5;
last_polarity = -max_voltage;

for i = 1:length(bit_stream)
    if bit_stream(i) == 1
        last_polarity = -last_polarity; % Alternate polarity
        dig_sig((i-1)*samples_per_pulse+1:i*samples_per_pulse) = last_polarity;
    else
        dig_sig((i-1)*samples_per_pulse+1:i*samples_per_pulse) = 0;
    end
end

plot(t,dig_sig,'LineWidth',1.5);
grid on;
xlabel('Time (seconds)');
ylabel('Voltage (V)');
title('AMI Encoding for Bit Stream [0100 0010 1001]');
ylim([-max_voltage*1.5, max_voltage*1.5]);


d/

clc; clear; close all;

bit_stream = [0 1 0 0 0 0 1 0 1 0 0 1];
bit_rate = 10000;
pulse_per_bit = 1;
pulse_duration = 1/(pulse_per_bit*bit_rate);
samples_per_pulse = 500;
fs = samples_per_pulse/pulse_duration;

t = 0:1/fs:(length(bit_stream)*pulse_duration);
dig_sig = zeros(1,length(t));
levels = [0, 5, 0, -5]; % MLT-3 levels
state = 1;

for i = 1:length(bit_stream)
    if bit_stream(i) == 1
        state = mod(state,4) + 1;
        dig_sig((i-1)*samples_per_pulse+1:i*samples_per_pulse) = levels(state);
    else
        dig_sig((i-1)*samples_per_pulse+1:i*samples_per_pulse) = levels(state);
    end
end

plot(t,dig_sig,'LineWidth',1.5);
grid on;
xlabel('Time (seconds)');
ylabel('Voltage (V)');
title('MLT-3 Encoding for Bit Stream [0100 0010 1001]');
ylim([-6,6]);


